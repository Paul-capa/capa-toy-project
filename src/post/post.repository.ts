import { PostEntity } from 'src/entities/post.entity';
import { createQueryBuilder, EntityRepository, Repository } from 'typeorm';
import { getConnection } from 'typeorm';

const rfcProcessing = ({ title, contents, id }) => {
  const value = `<?xml version="1.0" encoding="utf-8"?>
        <feed xmlns="http://www.w3.org/2005/Atom">
          <title>${title}</title>
          <link href="http://example.org/"/>
          <updated>2003-12-13T18:30:02Z</updated>
          <author>
            <name>${id}</name>
          </author>
          <id>${id}</id>
          <entry>
            <title>Atom-Powered Robots Run Amok</title>
            <link href="http://example.org/2003/12/13/atom03"/>
            <id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>
            <updated>2003-12-13T18:30:02Z</updated>
            <summary>${contents.substring(0, 4) + '...'}</summary>
          </entry>
        </feed>`;

  return value;
};

const rssProcessing = ({ title, contents, id }) => {
  const value = `
<!--  RSS generated by Radio UserLand v8.0.5 on 9/30/2002; 4:00:00 AM Pacific  -->
<rss xmlns:blogChannel="http://backend.userland.com/blogChannelModule" version="2.0">
<channel>
<title>${title}</title>
<link>http://www.scripting.com/</link>
<language>en-us</language>
<blogChannel:blogRoll>http://radio.weblogs.com/0001015/userland/scriptingNewsLeftLinks.opml</blogChannel:blogRoll>
<blogChannel:mySubscriptions>http://radio.weblogs.com/0001015/gems/mySubscriptions.opml</blogChannel:mySubscriptions>
<blogChannel:blink>http://diveintomark.org/</blogChannel:blink>
<copyright>Copyright 1997-2002 Dave Winer</copyright>
<lastBuildDate>Mon, 30 Sep 2002 11:00:00 GMT</lastBuildDate>
<docs>http://backend.userland.com/rss</docs>
<generator>Radio UserLand v8.0.5</generator>
<category domain="Syndic8">1765</category>
<managingEditor>dave@userland.com</managingEditor>
<webMaster>dave@userland.com</webMaster>
<ttl>40</ttl>
<item>
<description>${contents}</description>
<pubDate>Mon, 30 Sep 2002 01:56:02 GMT</pubDate>
<guid>http://scriptingnews.userland.com/backissues/2002/09/29#When:6:56:02PM</guid>
</item>
</channel>
</rss>
  `;

  return value;
};
@EntityRepository(PostEntity)
export class PostRepository extends Repository<PostEntity> {
  async createPost(
    title: string,
    contents: string,
    userId: number,
  ): Promise<boolean> {
    try {
      const rfc = rfcProcessing({
        title: title,
        contents: contents,
        id: userId,
      });

      const rss = rssProcessing({
        title: title,
        contents: contents,
        id: userId,
      });

      await this.create({
        title: title,
        contents: contents,
        user: {
          id: userId,
        },
        rfc: rfc,
        rss: rss,
      }).save();

      return true;
    } catch (e) {
      console.log('allPost Error: ', e);
      return false;
    }
  }

  async updatePost(
    postId: number,
    title: string,
    contents: string,
    userId: number,
  ): Promise<Boolean> {
    try {
      const rfc = rfcProcessing({
        title: title,
        contents: contents,
        id: postId,
      });

      const rss = rssProcessing({
        title: title,
        contents: contents,
        id: postId,
      });

      const post = await this.findOne({
        relations: ['user'],
        where: {
          id: postId,
        },
      });
      console.log('post: ', post);
      //update 문
      if (post && post.user.id === userId) {
        await this.save({
          id: postId,
          title,
          contents,
          rfc: rfc,
          rss: rss,
        });
      }

      return true;
    } catch (e) {
      console.log('✅ updatePost Error: ', e);
      return false;
    }
  }

  async post(postId: number) {
    const post = await this.findOne({ id: postId });

    return post;
  }

  async deletePost(postId: number) {
    await this.delete({
      id: postId,
    });
  }
}
